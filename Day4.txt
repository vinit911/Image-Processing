Day 4

1.Mid-Evaluation
2.To find out center of mass of each blob in a binary image
3.Converting an RGB image to binary using four trackbars to control R,G,B colour intensities and also the error range
4.Applying isValid function on Meanfilter program
5.Sinusoid representation of a binary image in Hough space


PROGRAMS:


PROGRAM: To find out center of mass of each blob in a binary image
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/core/core.hpp"
#include<iostream>

using namespace cv;
using namespace std;

void DFS_visit(int i, int j, int count, Mat img, Mat visited)
{
    visited.at<uchar>(i, j) = (int)(255 / count);
    int k, l;
    for (k = i - 1; k <= i + 1; k++)
    {
        for (l = j - 1; l <= j + 1; l++)
        {
            if (visited.at<uchar>(k, l) == 0 && img.at<uchar>(k, l) == 255)
                DFS_visit(k, l, count, img, visited);
        }
    }
}

int main(int, char)
{
    Mat img = imread("try.png", 0);

    Mat visited(img.rows, img.cols, CV_8UC1, Scalar(0));
    int i, j;

    int count = 1;
    for (i = 0; i < img.rows; i++)
    {
        for (j = 0; j < img.cols; j++)
        {
            if (visited.at<uchar>(i, j) == 0 && img.at<uchar>(i, j) == 255)
            {
                DFS_visit(i, j, count, img, visited);
                count++;
            }
        }
    }


    long int sumx = 0;
    long int sumy = 0;
    long int pixels = 0;

    int cnt = 1;
    while (cnt < 4)
    {
        for (i = 0; i < img.rows; i++)
        {
            for (j = 0; j < img.cols; j++)
            {
                if (visited.at<uchar>(i, j) == (int)(255 / cnt))
                {
                    sumx = sumx + i;
                    sumy = sumy + j;
                    pixels++;
                }
            }
        }
        cout << "CM of image" << cnt << "=" << double(sumx / pixels) << "," << double(sumy / pixels) << "\n";
        ++cnt;
    }



    namedWindow("Image", WINDOW_AUTOSIZE);
    imshow("Image", img);

    namedWindow("Image1", WINDOW_AUTOSIZE);
    imshow("Image1", visited);
    waitKey(0);

}


PROGRAM: Converting an RGB image to binary using four trackbars to control R,G,B colour intensities and also the error range
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/core/core.hpp"

using namespace cv;
using namespace std;


int main(int, char)
{
    int t1 = 0, t2 = 0, t3 = 0, t4 = 0;
    namedWindow("Image", WINDOW_AUTOSIZE);
    namedWindow("Final", WINDOW_AUTOSIZE);
    createTrackbar("TrackerB", "Final", &t1, 255);
    createTrackbar("TrackerG", "Final", &t2, 255);
    createTrackbar("TrackerR", "Final", &t3, 255);
    createTrackbar("TrackerE", "Final", &t4, 255);

    while (1)
    {
        Mat img = imread("E:\\Pics\\a.png", 1);
        Mat a(img.rows, img.cols, CV_8UC1, Scalar(0));
        int i, j;

        for (i = 0; i < img.rows; i++)
        {
            for (j = 0; j < img.cols; j++)
            {
                if ((img.at<Vec3b>(i, j)[0])>(t1 - t4) && (img.at<Vec3b>(i, j)[0])<(t1 + t4) &&
                    (img.at<Vec3b>(i, j)[1])>(t2 - t4) && (img.at<Vec3b>(i, j)[1])<(t2 + t4) &&
                    (img.at<Vec3b>(i, j)[2])>(t3 - t4) && (img.at<Vec3b>(i, j)[2]) < (t3 + t4) &&
                    (t1 - t4)>0 && (t2 - t4)>0 && (t3 - t4)>0)
                    a.at<uchar>(i, j) = 255;
                else
                    a.at<uchar>(i, j) = 0;
            }
        }

        imshow("Image", img);
        imshow("Final", a);

        int k = waitKey(50);
        if (k == 27)
            break;
    }


}


PROGRAM: Applying isValid function on Meanfilter program
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/core/core.hpp"
#include<iostream>
using namespace cv;
using namespace std;
int isValid(Mat img, int i, int j)
{
    if ((i <= 0) || (j <= 0) || (i >= img.rows) || (j >= img.cols))
        return 0;
    else
        return 1;
}

int main(int, char)
{
    Mat img = imread("E:\\Pics\\lena_n.png", 0);
    int i, j, k, l, m = 0, p, q;

    p = img.rows;
    q = img.cols;

    Mat a(p, q, CV_8UC1, Scalar(0));

    double kernel[3][3];
    kernel[0][0] = kernel[0][2] = kernel[2][0] = kernel[2][2] = 0.0625;
    kernel[0][1] = kernel[1][0] = kernel[2][1] = kernel[1][2] = 0.125;
    kernel[1][1] = 0.25;

    for (i = 0; i < p; i++)
    {
        for (j = 0; j < q; j++)
        {
            for (k = -1; k < 2; k++)
            {
                for (l = -1; l < 2; l++)
                {

                    if (isValid(img, i + k, j + l))
                        a.at<uchar>(i, j) += img.at<uchar>(i + k, j + l)*kernel[k + 1][l + 1];
                }
            }

        }
    }

    namedWindow("Win", WINDOW_AUTOSIZE);
    imshow("Win", a);


    waitKey(0);
    return 0;
}


PROGRAM: Sinusoid representation of a binary image in Hough space
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/core/core.hpp"
#include<math.h>
using namespace cv;
using namespace std;


int main(int, char)
{
    Mat img = imread("E:\\Pics\\pentagon.png", 0);
    int p = img.rows, q = img.cols;
    int rows = (int)(sqrt(p*p + q*q)) + 1;
    int i, j;
    int d;
    Mat a(rows, 180, CV_8UC1, Scalar(0));
    for (i = 0; i < p; i++)
    {
        for (j = 0; j < q; j++)
        {
            if (img.at<uchar>(i, j) == 255)
            {
                double theta, rad;
                for (theta = 0; theta <= 180; theta++)
                {
                    rad = ((3.14)*theta) / 180;
                    d = (int)(i*cos(rad) + j*sin(rad));
                    if (d>0)
                        a.at<uchar>(rows - d - 1, theta) = 255;
                }
            }
        }
    }

    namedWindow("Image", WINDOW_AUTOSIZE);
    imshow("Image", img);
    namedWindow("sine", WINDOW_AUTOSIZE);
    imshow("sine", a);
    waitKey(0);
}


