Day 5

Retrieving a binary image back from its sinusoidal representation
Basic video capturing





PROGRAM: Retrieving a binary image back from its sinusoidal representation

We run a for loop throughout the sinusoid image and check for local maximas  using a kernel and a threshold for determining the maxima. The coordinates of each maxima are of the form (d,theta). Using the equation d=x*cos(theta) + y*sin(theta), each maxima can be converted into a straight line and we get back the original binary image. This is basically the reverse process of converting a binary image to sinusoids in Hough space.

#include "opencv2\highgui\highgui.hpp"
#include "opencv2\imgproc\imgproc.hpp"
#include "opencv2\Core\Core.hpp"
#include<iostream>
#include<math.h>

using namespace cv;
using namespace std;


int main(int, char)
{
    Mat img = imread("E:\\Pics\\pentagon.png", 0);

    int p, k, l, n, m, max1, max2, x;
    double y;
    int cnt = 0;
    double d;
    double theta;
    p = (int)(sqrt(img.rows*img.rows + img.cols*img.cols));
    Mat curve((2 * p + 1), 180, CV_8UC1, Scalar(0));
    Mat Lines(img.rows, img.cols, CV_8UC1, Scalar(0));
    cout << p << endl;


    int i, j;
    int A[49];

    for (i = 0; i < 49; i++)
        A[i] = 0;

    for (i = 0; i < img.rows; i++)
    {

        for (j = 0; j < img.cols; j++)
        {
            if (img.at<uchar>(i, j) == 255)
            {
                for (theta = 0; theta < 180; theta++)
                {
                    d = j*cos((theta*3.14) / 180.00) + i*sin((theta*3.14) / 180.00) + p;
                    d = (int)d;
                    if (d>0)
                        curve.at<uchar>(d, theta) = curve.at<uchar>(d, theta) + 1;
                }
            }
        }
    }

    m = curve.rows;
    n = curve.cols;
    cout << m;
    for (i = 0; i < m; i++)
    {

        for (j = 0; j < n; j++)
        {
            max1 = curve.at<uchar>(i, j);
            if (max1>40)
            {

                for (x = 0; x < img.rows; x++)
                {

                    if (sin((j*3.14) / 180.00) != 0)
                        y = (i - p - x*cos((j*3.14) / 180.00)) / sin((j*3.14) / 180.00);
                    y = int(y);
                    if (y > 0 && y < img.rows)
                        Lines.at<uchar>(y, x) = 255;
                }
            }

        }
    }

    namedWindow("C", WINDOW_AUTOSIZE);
    imshow("C", Lines);

    namedWindow("B", WINDOW_AUTOSIZE);
    imshow("B", curve);

    namedWindow("A", WINDOW_AUTOSIZE);
    imshow("A", img);

    waitKey(0);
    return 0;
}


PROGRAM: Basic video capturing

The first command is: VideoCapture vid(0);  Here, 0 represents input from webcam. It can be replaced by 1(input from USB camera) or the path of an existing video file written in quotes.
We take an image Mat temp, which represents a frame of the video, and run it in a while loop in order to display the video(because a video is essentially a collection of fast moving frames)


Example program:(webcam input)


#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/core/core.hpp"


using namespace cv;
using namespace std;

int main(int, char)
{
    VideoCapture vid(0);
    Mat temp;
    namedWindow("window", WINDOW_AUTOSIZE);
    while (1)
    {
        vid.read(temp);

        imshow("window", temp);
        int k = waitKey(50);
        if (k == 27)
            break;
    }

}


